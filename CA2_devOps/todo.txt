python -m venv env
env/Scripts/activate
pip install -r requirements.txt
python -m flask run --reload
python -m pytest -v

Users choose between 
Default CIFAR100 Images
and 
Upload Own Image

(Only one can be selected at a time)

Upload Own Image will allow users to upload their own image to be classified

Allow Editing of the chosen Image (Crop, Rotate, etc.)
Allow Users to input what they think the image is (Text Input)

In prediction History, store the following information:
* Image✅
* Predicted Label✅
* What Model was used (name of model E.g VGG19, ResNet50, etc.) ✅
    * Different preprocessing for different model 
* What the user thought the image was (Text Input) if hav time
* What Editing was done to the image (Crop, Rotate, etc.) if hav time
* datetime of prediction✅

Front End:
* Default CIFAR100 Images will be displayed as a moving carousel of images ( 10 images ) somewhat ✅
* Image Display Card with prediction button ✅
* Modify Prediction History table to account for Images 
* Forms front end is fucked up  (need to fix)
* Display prediction... animation when loading prediction (if hav time)
* Change Sample Images for clearer images (if hav time)

Routes:
* /predict
    * Image re-sizing (if needed) ✅
    * get prediction from model successfully and displayed ✅
    * store prediction in database ✅
        * Create Database to store prediction history✅
    * return prediction to front End ✅
    * Fix Prediction image dataprocessing
* /history
    * get prediction history from database and return to front end (needs) ✅
        * Sorted by datetime/Confidence score ✅

UiPath:
    *Create one script
        * Auto Login
        * Auto Navigate to Prediction Page
        * Auto Upload Image
Pytest:
    * Validity testing
        * Test Entry to db
        * test Remove from db
        * Test prediction
    * Consistency testing
        * write one pytest image prediction output the same with same model and image 
    * Range testing
        * Test jpeg, png, jpg, gif, bmp, tiff, etc.
        * Test different image sizes ( should handle )
    * Unexpected testing
        * Ensure app return apprioate endpoint 
    * Expected Failure Testing
    ( Honestly can just use back the same as CA1 )

Web Hosting:
    * Render deployment of web application 
    * Another ML model containerize ✅


Commands
docker run --name cifar100_server -p 8501:8501 -v "C:/Users/Kaleb Nim/Downloads/VGG19_cifar100_classifier:/models/VGG19_cifar100_classifier" -e MODEL_NAME=VGG19_cifar100_classifier -t tensorflow/serving &
docker run --name cifar100_server -p 8501:8501 -v "C:/Users/Kaleb Nim/Downloads/VGG19_cifar100_classifier:/models/VGG19_cifar100_classifier" -e MODEL_NAME=VGG19_cifar100_classifier -t tensorflow/serving &

docker network connect ml_network cifar100_server


VGG Prediction model
https://vgg-19-cifar100-model.onrender.com/v1/models/VGG19_cifar100_classifier:predict